/* 
! Як верстати макет 
Макет складається з двох частин: панель навінації і контент.
Поки це буде не адаптптивний макет, але адаптив можна буде зробити потім.

Спочатку накидається HTML розмітка, а потім іде стилізація CSS

В великих проектах кращє використовувати CSS модулі

Окремий контейнер для іконок потрібен для того щоб в майбутньому можна було додавати нові іконки
Кнопка додавання винесена окремо для того щоб вона могла залишатись статичною

При наведені іконка має мати інший вигляд. Це можна зробити шляхом заміни іконки на  іншу з іншою стилізацією. Або шляхом її зафарбовування

Плей холдер




!Рендер меню
Якщо зось змінюється потрібно робити рірендеринг.
Наприклад: 
При натисканні іншої кнопки потрібно зробити так, щоб в натиснутої кнопки став клас active. Більше того, повинна змінитись сторінка, змінитись заголовок і всі дні
Рірендером в фрейворках Angular, React, Vue управляє внутрішній движок і не потірбно задумуватись як це відбувається. Але там є свої складності, тому що потрібно думати що потрібно трігерити
*/

// Видалення всього під menu__list для рендерингу з подальщим наповненням
function rerenderMenu(activeHabitId) {
  if(!activeHabitId){
    return;
  }
  // Знаходимо menu__list і робимо його порожнім
document.querySelector('.menu__list').innerHTML = '';
  for(const habit of habits){

  }
}
// Глобальна ф-ція рірендерингу
function rerender(activeHabitId){
  rerenderMenu(activeHabitId)
}

// init
(() => {
  loadData();
  // 0 habits буде активним
  rerender(habits[0].id)
})()
/* Цей метод має недолік в тому, що при натисканні на наступний елемент меню, ми фактично зносимо всі елементи з menu__list і додаємо по одному
Робота з DOM це не дуже дешева і проста операція і якщо таким методом часто користуватись це призведе до просадки продуктивності */

// Кращє працювати з тими елементами DOM які вже присутні і які були створенні при первинному рендері і там вже змінювати всі необхідні дані. Вішаючи на елементи ідентифікатори і по ним проходитись

/* 
!Попап
Можна відобразити декількома способами:
  - шляхом додавання style
  - або найкращий варіант оперувати класом
Кращє зробити 1 ф-цію яка перевіряла що якщо він прихований то ми його показуємо, якщо ні відображаємо

!FormData API
Будемо витягувати дані з input
Це можна зробити через id подивившись його value і отримуємо коментар. Але такий підхід не підходить для великих проектів , тут кращє отримувати дані вже в готовому вигляді, замість того щоб вручну  звертатись до певного value.
FormData API це певне API в якому ми можемо передати  нашу форму і в рамках цієї форми отримати звідти якісь дані по цій формі
ДЛя роботи потрібно: 
- навішати обробник подій onsubmit,який дає змогу сабмітити форму і обробляти
SubmitEvent {isTrusted: true, submitter: button.button, type: 'submit', target: form.habit__form, currentTarget: form.habit__form, …}

target має в собі цільовий елемент, в даному випадку form.habit__form  являється метою цієї події і при натисканні в target ми можемо отримати всю нашу форму яка засабмітилась



Елемент повинен мати name для того щоб потім обробити його FormData

Отримуємо дані форми в новий об'єкт FormData API взяла форму і склала в свою внутрішню структуру даних із якої ми можемо отримувати, додавати якісь дані, посуті це тимчаове сховищє де в нас зберігаються якісь значення нашої форми із яких ми можемо отримати панель

Методи:
  - get - отримує одне значення
  - getAll - отримує всі значення
  - append - додає елементи
  - delete - видалити частину об'єкта
  - has - перевірити на наявність
  - keys - отримати ключі
  - set - встановити
  

  Коли ми передаємо форму в FormData вона проходиться по всьоу що є всередині і в якості ключа використовує name форми і в якості значення value


Щоб зберегти текст можна використовувати якийсь стан, але при роботі з формою кращє використовувати можливості form, а саме зробити input з іконкою який буде прихований користувачю але доступний через JS. Це охначає що при виборі іконки буде фіксватись вибір користувача в даному полі

Реалізовується односторонній звязок, де при натисканні кнопки змінюється input. 
Двувсторонній зв'язк уе коли при зміні value input змінюється і активна іконка


При валідації бувають обовязкові і необовязкові поля




!пройти роботу з формами і що таке submite, placeholder, new FormData(), рефакторинг, валідація і ресетінг форми, копіпастинг, document.location
!document.location.hash.replace
! document.location.replace(document.location.pathname + '#' + activeHabitId);

*/